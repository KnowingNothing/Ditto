@main = primfn(A_1: handle, B_1: handle, C_1: handle, F_1: handle) -> ()
  attr = {"from_legacy_te_schedule": True, "global_symbol": "main", "tir.noalias": True}
  buffers = {F: Buffer(F_2: Pointer(float16), float16, [12, 256, 64], []),
             C: Buffer(C_2: Pointer(float16), float16, [12, 256, 64], []),
             B: Buffer(B_2: Pointer(float16), float16, [12, 64, 256], []),
             A: Buffer(A_2: Pointer(float16), float16, [12, 256, 64], [])}
  buffer_map = {A_1: A, B_1: B, C_1: C, F_1: F} {
  allocate(E_frag: Pointer(global float32), float32, [393216]), storage_scope = global {
    attr [IterVar(blockIdx.z: int32, (nullptr), "ThreadIndex", "blockIdx.z")] "thread_extent" = 12;
    allocate(E_frag.wmma.accumulator: Pointer(wmma.accumulator float32), float32, [512]), storage_scope = wmma.accumulator;
    allocate(D_frag: Pointer(wmma.accumulator float32), float32, [256]), storage_scope = wmma.accumulator;
    allocate(A_shared.shared: Pointer(shared float16), float16, [2048]), storage_scope = shared;
    allocate(B_shared.shared: Pointer(shared float16), float16, [8192]), storage_scope = shared;
    allocate(A_shared.shared.wmma.matrix_a: Pointer(wmma.matrix_a float16), float16, [1024]), storage_scope = wmma.matrix_a;
    allocate(B_shared.shared.wmma.matrix_b: Pointer(wmma.matrix_b float16), float16, [1024]), storage_scope = wmma.matrix_b;
    allocate(exp.wmma.matrix_a: Pointer(wmma.matrix_a float16), float16, [1024]), storage_scope = wmma.matrix_a;
    allocate(C_ext.shared.wmma.matrix_b: Pointer(wmma.matrix_b float16), float16, [2048]), storage_scope = wmma.matrix_b;
    attr [IterVar(blockIdx.y: int32, (nullptr), "ThreadIndex", "blockIdx.y")] "thread_extent" = 8;
    attr [IterVar(blockIdx.x: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 1;
    attr [IterVar(threadIdx.z: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
    attr [IterVar(threadIdx.y: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4 {
      @tir.tvm_fill_fragment(E_frag.wmma.accumulator, 16, 16, 16, 0, 0f32, dtype=handle)
      @tir.tvm_fill_fragment(E_frag.wmma.accumulator, 16, 16, 16, 1, 0f32, dtype=handle)
      attr [IterVar(threadIdx.z_1: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_1: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4 {
        @tir.tvm_fill_fragment(D_frag, 16, 16, 16, 0, 0f32, dtype=handle)
        attr [IterVar(threadIdx.z_2: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp(((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)] = (float16x4*)A_2[ramp(((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)]
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp((((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)] = (float16x4*)A_2[ramp((((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)]
        attr [IterVar(threadIdx.z_3: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp(((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)), 1, 4)] = (float16x4*)B_2[ramp((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 1024), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 4096), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 2048), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 8192), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 3072), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 12288), 1, 4)]
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z_1*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y_1*256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 3072), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 0, B_shared.shared.wmma.matrix_b, 0, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 1, B_shared.shared.wmma.matrix_b, 1, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 2, B_shared.shared.wmma.matrix_b, 2, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 3, B_shared.shared.wmma.matrix_b, 3, D_frag, 0, dtype=handle)
        @tir.tvm_store_matrix_sync(D_frag, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), B_shared.shared, ((threadIdx.z_1*1024) + (threadIdx.y_1*256)), 256, 2, dtype=handle), 16, "row_major", dtype=handle)
      }
      attr [IterVar(threadIdx.z_4: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_4, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_5: int32, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5: int32, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = (float16*)C_2[((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4))]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16))]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16))]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16))]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 2048)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 1024)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16))]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16))]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16))]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3072), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3073), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3074), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3075), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 4096)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 2048)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16))]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16))]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16))]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5120), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5121), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5122), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5123), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 6144)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 3072)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16))]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16))]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16))]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7168), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7169), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7170), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7171), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y*512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2304), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 4, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4096), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 5, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4352), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 6, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6144), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 7, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6400), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 0, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 1, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 2, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 3, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 4, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 5, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 6, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 7, E_frag.wmma.accumulator, 1, dtype=handle)
      attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4 {
        @tir.tvm_fill_fragment(D_frag, 16, 16, 16, 0, 0f32, dtype=handle)
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp(((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)] = (float16x4*)A_2[ramp(((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)]
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp((((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)] = (float16x4*)A_2[ramp((((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp(((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 64), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 1024), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 4160), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 2048), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 8256), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 3072), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 12352), 1, 4)]
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z_1*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y_1*256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 3072), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 0, B_shared.shared.wmma.matrix_b, 0, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 1, B_shared.shared.wmma.matrix_b, 1, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 2, B_shared.shared.wmma.matrix_b, 2, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 3, B_shared.shared.wmma.matrix_b, 3, D_frag, 0, dtype=handle)
        @tir.tvm_store_matrix_sync(D_frag, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), B_shared.shared, ((threadIdx.z_1*1024) + (threadIdx.y_1*256)), 256, 2, dtype=handle), 16, "row_major", dtype=handle)
      }
      attr [IterVar(threadIdx.z_4, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_4, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 4096)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 4096)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 4096)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 4096)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 2048)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 5120)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 4096)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 4096)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 4096)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3072), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3073), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3074), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3075), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 4096)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 6144)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 4096)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 4096)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 4096)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5120), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5121), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5122), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5123), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 6144)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 7168)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 4096)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 4096)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 4096)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7168), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7169), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7170), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7171), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y*512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2304), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 4, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4096), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 5, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4352), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 6, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6144), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 7, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6400), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 0, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 1, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 2, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 3, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 4, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 5, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 6, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 7, E_frag.wmma.accumulator, 1, dtype=handle)
      attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4 {
        @tir.tvm_fill_fragment(D_frag, 16, 16, 16, 0, 0f32, dtype=handle)
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp(((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)] = (float16x4*)A_2[ramp(((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)]
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp((((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)] = (float16x4*)A_2[ramp((((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp(((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 128), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 1024), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 4224), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 2048), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 8320), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 3072), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 12416), 1, 4)]
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z_1*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y_1*256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 3072), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 0, B_shared.shared.wmma.matrix_b, 0, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 1, B_shared.shared.wmma.matrix_b, 1, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 2, B_shared.shared.wmma.matrix_b, 2, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 3, B_shared.shared.wmma.matrix_b, 3, D_frag, 0, dtype=handle)
        @tir.tvm_store_matrix_sync(D_frag, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), B_shared.shared, ((threadIdx.z_1*1024) + (threadIdx.y_1*256)), 256, 2, dtype=handle), 16, "row_major", dtype=handle)
      }
      attr [IterVar(threadIdx.z_4, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_4, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 8192)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 8192)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 8192)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 8192)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 2048)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 9216)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 8192)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 8192)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 8192)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3072), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3073), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3074), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3075), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 4096)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 10240)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 8192)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 8192)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 8192)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5120), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5121), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5122), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5123), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 6144)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 11264)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 8192)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 8192)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 8192)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7168), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7169), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7170), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7171), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y*512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2304), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 4, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4096), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 5, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4352), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 6, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6144), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 7, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6400), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 0, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 1, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 2, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 3, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 4, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 5, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 6, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 7, E_frag.wmma.accumulator, 1, dtype=handle)
      attr [IterVar(threadIdx.z_1, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_1, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4 {
        @tir.tvm_fill_fragment(D_frag, 16, 16, 16, 0, 0f32, dtype=handle)
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp(((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)] = (float16x4*)A_2[ramp(((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)), 1, 4)]
        attr [IterVar(threadIdx.z_2, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_2, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        A_shared.shared[ramp((((((threadIdx.z_2*512) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*256)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)] = (float16x4*)A_2[ramp((((((((blockIdx.z*16384) + (blockIdx.y*2048)) + (floormod(((threadIdx.y_2*8) + floordiv(threadIdx.x, 4)), 16)*64)) + (threadIdx.z_2*32)) + (floordiv(((threadIdx.y_2*128) + (threadIdx.x*4)), 256)*16)) + (floormod(threadIdx.x, 4)*4)) + 1024), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp(((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 192), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 1024), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 4288), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 2048), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 8384), 1, 4)]
        attr [IterVar(threadIdx.z_3, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
        attr [IterVar(threadIdx.y_3, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
        attr [IterVar(threadIdx.x_1, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
        B_shared.shared[ramp((((((threadIdx.z_3*512) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*256)) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 3072), 1, 4)] = (float16x4*)B_2[ramp(((((((blockIdx.z*16384) + (floormod(((threadIdx.y_3*8) + floordiv(threadIdx.x_1, 4)), 16)*256)) + (threadIdx.z_3*32)) + (floordiv(((threadIdx.y_3*128) + (threadIdx.x_1*4)), 256)*16)) + (floormod(threadIdx.x_1, 4)*4)) + 12480), 1, 4)]
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z_1*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(A_shared.shared.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z_1*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y_1*256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_load_matrix_sync(B_shared.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y_1*256) + 3072), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 0, B_shared.shared.wmma.matrix_b, 0, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 1, B_shared.shared.wmma.matrix_b, 1, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 2, B_shared.shared.wmma.matrix_b, 2, D_frag, 0, dtype=handle)
        @tir.tvm_mma_sync(D_frag, 0, A_shared.shared.wmma.matrix_a, 3, B_shared.shared.wmma.matrix_b, 3, D_frag, 0, dtype=handle)
        @tir.tvm_store_matrix_sync(D_frag, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), B_shared.shared, ((threadIdx.z_1*1024) + (threadIdx.y_1*256)), 256, 2, dtype=handle), 16, "row_major", dtype=handle)
      }
      attr [IterVar(threadIdx.z_4, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp(((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_4, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_4, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_2, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
      A_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)] = cast(float16x4, @tir.exp((float32x4*)B_shared.shared[ramp((((((threadIdx.z_4*512) + (floordiv(((threadIdx.y_4*128) + (threadIdx.x_2*4)), 256)*256)) + (floormod(((threadIdx.y_4*8) + floordiv(threadIdx.x_2, 4)), 16)*16)) + (floormod(threadIdx.x_2, 4)*4)) + 1024), 1, 4)], dtype=float32x4))
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 12288)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 12288)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 12288)]
        B_shared.shared[(((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 12288)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4)*256) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 2048)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 13312)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2049), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 12288)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2050), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 12288)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 2051), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 12288)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3072), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3073), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3074), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 3075), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 4096)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 14336)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4097), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 12288)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4098), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 12288)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 4099), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 12288)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5120), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5121), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5122), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 5123), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*256) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4)) + 6144)] = (float16*)C_2[(((((blockIdx.z*16384) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*64)) + (((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256))*16)) + (floormod(threadIdx.x_3, 4)*4)) + 15360)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6145), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256))*16)) + floormod(((threadIdx.x_3*4) + 1), 16)) + 12288)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6146), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256))*16)) + floormod(((threadIdx.x_3*4) + 2), 16)) + 12288)]
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*2048) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = (float16*)C_2[((((((blockIdx.z*16384) + (floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 6147), 2048)*1024)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*64)) + (((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256))*16)) + floormod(((threadIdx.x_3*4) + 3), 16)) + 12288)]
      }
      attr [IterVar(threadIdx.z_5, (nullptr), "ThreadIndex", "threadIdx.z")] "thread_extent" = 2;
      attr [IterVar(threadIdx.y_5, (nullptr), "ThreadIndex", "threadIdx.y")] "thread_extent" = 4;
      attr [IterVar(threadIdx.x_3, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32 {
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7168), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv(((threadIdx.y_5*128) + (threadIdx.x_3*4)), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(threadIdx.x_3, 4)), 16)*16)) + (floormod(threadIdx.x_3, 4)*4))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7169), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 1), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 1), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 1), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7170), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 2), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 2), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 2), 16))] = 1f16
        B_shared.shared[((((floordiv(((((threadIdx.z_5*512) + (threadIdx.y_5*128)) + (threadIdx.x_3*4)) + 7171), 2048)*2048) + (floormod((((threadIdx.z_5*2) + floordiv((((threadIdx.y_5*128) + (threadIdx.x_3*4)) + 3), 256)) + 4), 8)*256)) + (floormod(((threadIdx.y_5*8) + floordiv(((threadIdx.x_3*4) + 3), 16)), 16)*16)) + floormod(((threadIdx.x_3*4) + 3), 16))] = 1f16
      }
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, (threadIdx.z*1024), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(exp.wmma.matrix_a, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), A_shared.shared, ((threadIdx.z*1024) + 768), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, (threadIdx.y*512), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 256), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 2, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2048), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 3, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 2304), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 4, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4096), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 5, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 4352), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 6, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6144), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_load_matrix_sync(C_ext.shared.wmma.matrix_b, 16, 16, 16, 7, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float16), B_shared.shared, ((threadIdx.y*512) + 6400), 256, 1, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 0, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 0, C_ext.shared.wmma.matrix_b, 1, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 2, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 1, C_ext.shared.wmma.matrix_b, 3, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 4, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 2, C_ext.shared.wmma.matrix_b, 5, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 0, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 6, E_frag.wmma.accumulator, 0, dtype=handle)
      @tir.tvm_mma_sync(E_frag.wmma.accumulator, 1, exp.wmma.matrix_a, 3, C_ext.shared.wmma.matrix_b, 7, E_frag.wmma.accumulator, 1, dtype=handle)
      @tir.tvm_store_matrix_sync(E_frag.wmma.accumulator, 16, 16, 16, 0, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), E_frag, ((((blockIdx.z*32768) + (blockIdx.y*4096)) + (threadIdx.z*2048)) + (threadIdx.y*512)), 256, 2, dtype=handle), 16, "row_major", dtype=handle)
      @tir.tvm_store_matrix_sync(E_frag.wmma.accumulator, 16, 16, 16, 1, @tir.tvm_access_ptr(@tir.type_annotation(, dtype=float32), E_frag, (((((blockIdx.z*32768) + (blockIdx.y*4096)) + (threadIdx.z*2048)) + (threadIdx.y*512)) + 256), 256, 2, dtype=handle), 16, "row_major", dtype=handle)
    }
    attr [IterVar(blockIdx.x_1: int32, (nullptr), "ThreadIndex", "blockIdx.x")] "thread_extent" = 6144;
    attr [IterVar(threadIdx.x_4: int32, (nullptr), "ThreadIndex", "threadIdx.x")] "thread_extent" = 32;
    F_2[((blockIdx.x_1*32) + threadIdx.x_4)] = (cast(float16, (float32*)E_frag[((((floordiv(((blockIdx.x_1*32) + threadIdx.x_4), 1024)*2048) + (floordiv(floormod(((blockIdx.x_1*32) + threadIdx.x_4), 64), 16)*256)) + (floordiv(floormod(((blockIdx.x_1*32) + threadIdx.x_4), 1024), 64)*16)) + floormod(threadIdx.x_4, 16))]) / (cast(float16, (float32*)E_frag[(((floordiv(((blockIdx.x_1*32) + threadIdx.x_4), 1024)*2048) + (floordiv(floormod(((blockIdx.x_1*32) + threadIdx.x_4), 1024), 64)*16)) + 1807)]) + 1e-05f16))
  }
}

==PROF== Connected to process 31443 (/home/CORP.PKUSC.ORG/zchno/venv/torch-1.10-trt/bin/python3)
==PROF== Profiling "default_function_kernel0" - 1: 0%....50%....100% - 10 passes
==PROF== Profiling "default_function_kernel1" - 2: 0%....50%....100% - 10 passes

B,M,N,K,L,in_dtype,acc_dtype,sm,cost
12,256,64,64,256,float16,float32,70,-1
==PROF== Disconnected from process 31443
[31443] python3@127.0.0.1
  default_function_kernel0, 2022-Mar-24 14:34:26, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           1.14
    SM Frequency                                                             cycle/usecond                         716.79
    Elapsed Cycles                                                                   cycle                         18,999
    Memory [%]                                                                           %                          64.96
    DRAM Throughput                                                                      %                           3.06
    Duration                                                                       usecond                          26.50
    L1/TEX Cache Throughput                                                              %                          83.95
    L2 Cache Throughput                                                                  %                          14.29
    SM Active Cycles                                                                 cycle                      14,695.12
    Compute (SM) [%]                                                                     %                          13.25
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Memory is more heavily utilized than Compute: Look at the Memory Workload Analysis report section to see      
          where the memory system bottleneck is. Check memory replay (coalescing) metrics to make sure you're           
          efficiently utilizing the bytes transferred. Also consider whether it is possible to do more work per memory  
          access (kernel fusion) or whether there are values you can (re)compute.                                       

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        256
    Function Cache Configuration                                                                  cudaFuncCachePreferNone
    Grid Size                                                                                                          96
    Registers Per Thread                                                   register/thread                            128
    Shared Memory Configuration Size                                                 Kbyte                         102.40
    Driver Shared Memory Per Block                                             Kbyte/block                           1.02
    Dynamic Shared Memory Per Block                                             byte/block                              0
    Static Shared Memory Per Block                                             Kbyte/block                          20.48
    Threads                                                                         thread                         24,576
    Waves Per SM                                                                                                     0.44
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 96 blocks, which is less than the GPU's 108            
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources.            

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             32
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              7
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                             16
    Theoretical Occupancy                                                                %                             25
    Achieved Occupancy                                                                   %                          12.39
    Achieved Active Warps Per SM                                                      warp                           7.93
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (25.0%) is limited by the number of required registers The difference     
          between calculated theoretical (25.0%) and measured achieved occupancy (12.4%) can be the result of warp      
          scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between    
          warps within a block as well as across blocks of the same kernel.                                             

  default_function_kernel1, 2022-Mar-24 14:34:26, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           1.16
    SM Frequency                                                             cycle/usecond                         731.80
    Elapsed Cycles                                                                   cycle                         10,614
    Memory [%]                                                                           %                           7.16
    DRAM Throughput                                                                      %                           4.56
    Duration                                                                       usecond                          14.50
    L1/TEX Cache Throughput                                                              %                           5.00
    L2 Cache Throughput                                                                  %                          11.76
    SM Active Cycles                                                                 cycle                       5,774.98
    Compute (SM) [%]                                                                     %                           5.22
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance 
          of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate    
          latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.                 

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                         32
    Function Cache Configuration                                                                  cudaFuncCachePreferNone
    Grid Size                                                                                                       6,144
    Registers Per Thread                                                   register/thread                             16
    Shared Memory Configuration Size                                                 Kbyte                          32.77
    Driver Shared Memory Per Block                                             Kbyte/block                           1.02
    Dynamic Shared Memory Per Block                                             byte/block                              0
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                        196,608
    Waves Per SM                                                                                                     1.78
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   A wave of thread blocks is defined as the maximum number of blocks that can be executed in parallel on the    
          target GPU. The number of blocks in a wave depends on the number of multiprocessors and the theoretical       
          occupancy of the kernel. This kernel launch results in 1 full waves and a partial wave of 2687 thread         
          blocks. Under the assumption of a uniform execution duration of all thread blocks, the partial wave may       
          account for up to 50.0% of the total kernel runtime with a lower occupancy of 74.0%. Try launching a grid     
          with no partial wave. The overall impact of this tail effect also lessens with the number of full waves       
          executed for a grid.                                                                                          

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             32
    Block Limit Registers                                                            block                            128
    Block Limit Shared Mem                                                           block                            164
    Block Limit Warps                                                                block                             64
    Theoretical Active Warps per SM                                                   warp                             32
    Theoretical Occupancy                                                                %                             50
    Achieved Occupancy                                                                   %                          13.02
    Achieved Active Warps Per SM                                                      warp                           8.33
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM The     
          difference between calculated theoretical (50.0%) and measured achieved occupancy (13.0%) can be the result   
          of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur    
          between warps within a block as well as across blocks of the same kernel.                                     

